@page "/tab"@inject SpectoLogic.Blazor.MSTeams.ITeamsClient TeamsClient;@inject IHttpClientFactory HttpFactory;<h1>Counter</h1><p>Current count: @currentCount</p><p>Current User: @userName</p><p>AuthToken: @authToken</p><p>Server Token: @authServerToken</p><p>User Data: @userData</p><button class="btn btn-primary" @onclick="IncrementCount">    Click me</button><button class="btn btn-primary" @onclick="GetUserName">    Get UserName</button><br /><button class="btn btn-light" @onclick="GetAuthToken">    Get Auth-Token</button><button class="btn btn-light" @onclick="GetServerAuthToken">    Get Server-Token</button><button class="btn btn-light" @onclick="GetUserData">    Get User Data</button><br /><button class="btn btn-light" @onclick="GetWeatherServerAuthToken">    Get Weather Server-Token</button>@code { private int currentCount = 0;    private string userName = string.Empty;    private void IncrementCount()    {        currentCount++;    }    private async Task GetUserName()    {        userName = await TeamsClient.GetUPN();    }    private string authToken = string.Empty;    private async Task GetAuthToken()    {        authToken = await TeamsClient.GetClientToken();    }    private string authServerToken = string.Empty;    private async Task GetServerAuthToken()    {        try        {            authServerToken = await TeamsClient.GetServerToken(authToken, new string[1] { "https://graph.microsoft.com/User.Read" });        }        catch (Exception ex)        {            authServerToken = $"Fehler: {ex.Message}";        }    }    private string userData = string.Empty;    private async Task GetUserData()    {        try        {            var client = HttpFactory.CreateClient();            HttpRequestMessage request = new HttpRequestMessage()            {                Method = HttpMethod.Get,
                // https://graph.microsoft.com/v1.0/me/mailFolders('Inbox')/messages?$select=sender,subject&$top=2
                RequestUri = new Uri("https://graph.microsoft.com/v1.0/me/")            };            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authServerToken);            authToken = $"Bearer {authServerToken}";            var response = await client.SendAsync(request);            userData = await response.Content.ReadAsStringAsync();        }        catch (Exception ex)        {            userData = $"Fehler: {ex.Message}";        }    }

    private string weatherAuthServerToken = string.Empty;
    private async Task GetWeatherServerAuthToken()
    {
        try
        {
            authServerToken = await TeamsClient.GetServerToken(authToken,
                       new string[1] { "api://spectologic.eu.ngrok.io/38a06d0f-e38d-4e93-be39-aa42d8ebe604/weather_api" });
        }
        catch (Exception ex)
        {
            authServerToken = $"Fehler: {ex.Message}";
        }
    }
}